plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}


group = mod_group_id
version = System.getenv("MC_QQ_VERSION") ?: project.findProperty("mod_version")

base {
    archivesName = "${mod_name}_${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
}

ext {
    lombok_version = System.getenv("LOMBOK_VERSION") ?: project.findProperty("lombok_version")
    mcqq_tool_version = System.getenv("MCQQ_TOOL_VERSION") ?: project.findProperty("mcqq_tool_version")
    slf4j_version = System.getenv("SLF4J_VERSION") ?: project.findProperty("slf4j_version")
    slf4j_simple_version = System.getenv("SLF4J_SIMPLE_VERSION") ?: project.findProperty("slf4j_simple_version")
}


minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
        }
        server {
            args '--nogui'
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = uri(maven_url)
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("PACKAGE_READ_ONLY_TOKEN")
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation "org.slf4j:slf4j-api:${slf4j_version}"
    compileOnly "org.slf4j:slf4j-simple:${slf4j_simple_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    implementation "org.projectlombok:lombok:${lombok_version}"
    implementation "com.github.theword.mcqq:mc-qq-tool:${mcqq_tool_version}"
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    duplicatesStrategy = 'EXCLUDE'
    from {
        configurations.compileClasspath.collect {
            if (
                    it.name.containsIgnoreCase("mc-qq-tool")
                            || it.name.containsIgnoreCase("websocket")
                            || it.name.containsIgnoreCase("snake")
                            || it.name.containsIgnoreCase("slf4j")
            )
                zipTree(it)
        }
    }
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
